<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>VSCode on TakoyakiSoft</title><link>https://takoyakisoft.com/tags/vscode/</link><description>Recent content in VSCode on TakoyakiSoft</description><generator>Hugo -- gohugo.io</generator><language>ja</language><lastBuildDate>Sun, 22 Jun 2025 00:00:00 +0900</lastBuildDate><atom:link href="https://takoyakisoft.com/tags/vscode/index.xml" rel="self" type="application/rss+xml"/><item><title>Roblox（TypeScript）とVSCodeでモダンな開発環境のテンプレート</title><link>https://takoyakisoft.com/p/roblox-ts-template-for-modern-development/</link><pubDate>Sun, 22 Jun 2025 00:00:00 +0900</pubDate><guid>https://takoyakisoft.com/p/roblox-ts-template-for-modern-development/</guid><description>&lt;img src="https://takoyakisoft.com/p/roblox-ts-template-for-modern-development/roblox-ts-template-for-modern-development.webp" alt="Featured image of post Roblox（TypeScript）とVSCodeでモダンな開発環境のテンプレート" />&lt;h1 id="githubテンプレート">GitHubテンプレート
&lt;/h1>&lt;p>&lt;a class="link" href="https://github.com/takoyakisoft/roblox-ts-rojo-template" target="_blank" rel="noopener"
>roblox-ts-rojo-template&lt;/a>&lt;/p>
&lt;h1 id="これは何">これは何？
&lt;/h1>&lt;p>Roblox（TypeScript）でVSCodeを使ったモダンな開発環境のテンプレートです。&lt;/p>
&lt;ul>
&lt;li>VSCode 👉 Roblox Studioへの同期: &lt;a class="link" href="https://github.com/rojo-rbx/rojo" target="_blank" rel="noopener"
>Rojo&lt;/a>&lt;/li>
&lt;li>リンター: &lt;a class="link" href="https://github.com/eslint/eslint" target="_blank" rel="noopener"
>ESlint&lt;/a>&lt;/li>
&lt;li>フォーマッター: &lt;a class="link" href="https://github.com/prettier/prettier" target="_blank" rel="noopener"
>Prettier&lt;/a>&lt;/li>
&lt;li>パッケージマネージャー: &lt;a class="link" href="https://github.com/pnpm/pnpm" target="_blank" rel="noopener"
>pnpm&lt;/a>&lt;/li>
&lt;/ul>
&lt;blockquote class="alert alert-caution">
&lt;p class="alert-heading">
❗
Caution
&lt;/p>
&lt;p>動作未確認ですが、有名なパッケージを入れてあります。&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>&amp;ldquo;@rbxts/janitor&amp;rdquo;&lt;/li>
&lt;li>&amp;ldquo;@rbxts/profileservice&amp;rdquo;&lt;/li>
&lt;li>&amp;ldquo;@rbxts/replicaservice&amp;rdquo;&lt;/li>
&lt;li>&amp;ldquo;@rbxts/cmdr&amp;rdquo;&lt;/li>
&lt;li>&amp;ldquo;@rbxts/testez&amp;rdquo;&lt;/li>
&lt;/ul>
&lt;blockquote class="alert alert-note">
&lt;p class="alert-heading">
ℹ️
Note
&lt;/p>
&lt;p>動作確認済&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>&amp;ldquo;@rbxts/react&amp;rdquo;&lt;/li>
&lt;li>&amp;ldquo;@rbxts/react-roblox&amp;rdquo;&lt;/li>
&lt;/ul>
&lt;blockquote class="alert alert-warning">
&lt;p class="alert-heading">
ℹ️
Warning
&lt;/p>
&lt;p>CI/CDは入ってないです&lt;/p>
&lt;/blockquote>
&lt;h1 id="インストール">インストール
&lt;/h1>
&lt;blockquote class="alert alert-tip">
&lt;p class="alert-heading">
💡
Tip
&lt;/p>
&lt;p>&amp;ldquo;Use this template&amp;quot;ボタンから使えます。&lt;/p>
&lt;/blockquote>
&lt;h2 id="パッケージのインストール">パッケージのインストール
&lt;/h2>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">pnpm install
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="vscode拡張機能のインストール">VSCode拡張機能のインストール
&lt;/h2>&lt;p>このプロジェクトを開くとVSCodeで以下の拡張機能が表示されるのでインストールします。&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://marketplace.visualstudio.com/items?itemName=Roblox-TS.vscode-roblox-ts" target="_blank" rel="noopener"
>roblox-ts&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint" target="_blank" rel="noopener"
>ESLint&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode" target="_blank" rel="noopener"
>Prettier&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://marketplace.visualstudio.com/items?itemName=evaera.vscode-rojo" target="_blank" rel="noopener"
>Rojo&lt;/a>&lt;/li>
&lt;/ul>
&lt;h1 id="使い方">使い方
&lt;/h1>&lt;h2 id="vscodeからrojo">VSCodeからRojo
&lt;/h2>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">pnpm run watch
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>「Ctrl + Shift + P」&lt;/p>
&lt;p>「Rojo: Open Menu」&lt;/p>
&lt;blockquote class="alert alert-note">
&lt;p class="alert-heading">
ℹ️
Note
&lt;/p>
&lt;p>初めてならRoblox Studioを起動して、Install Roblox Studio Plugin&lt;/p>
&lt;/blockquote>
&lt;p>「▶ default.project.json」&lt;/p>
&lt;p>&lt;img src="https://takoyakisoft.com/p/roblox-ts-template-for-modern-development/Code_m5RjRhSECe.webp"
width="1260"
height="860"
srcset="https://takoyakisoft.com/p/roblox-ts-template-for-modern-development/Code_m5RjRhSECe_hu_f5c6a58a949c0197.webp 480w, https://takoyakisoft.com/p/roblox-ts-template-for-modern-development/Code_m5RjRhSECe_hu_67808a5262379ac3.webp 1024w"
loading="lazy"
alt="VSCodeからRojoの起動方法"
class="gallery-image"
data-flex-grow="146"
data-flex-basis="351px"
>&lt;/p>
&lt;h2 id="roblox-studioからrojo">Roblox StudioからRojo
&lt;/h2>&lt;p>「プラグイン」タブ&lt;/p>
&lt;p>「Rojo」リボン&lt;/p>
&lt;p>「Connect」ボタン&lt;/p>
&lt;p>&lt;img src="https://takoyakisoft.com/p/roblox-ts-template-for-modern-development/roblox-ts-template-for-modern-development.webp"
width="1342"
height="983"
srcset="https://takoyakisoft.com/p/roblox-ts-template-for-modern-development/roblox-ts-template-for-modern-development_hu_8ffd71bbf5e6b12f.webp 480w, https://takoyakisoft.com/p/roblox-ts-template-for-modern-development/roblox-ts-template-for-modern-development_hu_230b7f572a692276.webp 1024w"
loading="lazy"
alt="Roblox StudioからRojoの接続方法"
class="gallery-image"
data-flex-grow="136"
data-flex-basis="327px"
>&lt;/p></description></item><item><title>Roblox（Luau）とVSCodeでモダンな開発環境のテンプレート</title><link>https://takoyakisoft.com/p/roblox-luau-template-for-modern-development/</link><pubDate>Sat, 21 Jun 2025 00:00:00 +0900</pubDate><guid>https://takoyakisoft.com/p/roblox-luau-template-for-modern-development/</guid><description>&lt;img src="https://takoyakisoft.com/p/roblox-luau-template-for-modern-development/roblox-luau-template-for-modern-development.webp" alt="Featured image of post Roblox（Luau）とVSCodeでモダンな開発環境のテンプレート" />&lt;h1 id="githubテンプレート">GitHubテンプレート
&lt;/h1>&lt;p>&lt;a class="link" href="https://github.com/takoyakisoft/roblox-rojo-wally-template" target="_blank" rel="noopener"
>roblox-rojo-wally-template&lt;/a>&lt;/p>
&lt;h1 id="これは何">これは何？
&lt;/h1>&lt;p>Roblox（Luau）でVSCodeを使ったモダンな開発環境のテンプレートです。&lt;/p>
&lt;ul>
&lt;li>VSCode 👉 Roblox Studioへの同期: &lt;a class="link" href="https://github.com/rojo-rbx/rojo" target="_blank" rel="noopener"
>Rojo&lt;/a>&lt;/li>
&lt;li>リンター: &lt;a class="link" href="https://github.com/Kampfkarren/selene" target="_blank" rel="noopener"
>Selene&lt;/a>&lt;/li>
&lt;li>フォーマッター: &lt;a class="link" href="https://github.com/JohnnyMorganz/StyLua" target="_blank" rel="noopener"
>StyLua&lt;/a>&lt;/li>
&lt;li>パッケージマネージャー: &lt;a class="link" href="https://github.com/UpliftGames/wally" target="_blank" rel="noopener"
>Wally&lt;/a>&lt;/li>
&lt;li>RojoとWallyのマネージャー:　&lt;a class="link" href="https://github.com/rojo-rbx/rokit" target="_blank" rel="noopener"
>Rokit&lt;/a>&lt;/li>
&lt;/ul>
&lt;blockquote class="alert alert-warning">
&lt;p class="alert-heading">
ℹ️
Warning
&lt;/p>
&lt;p>CI/CDは入ってないです: &lt;a class="link" href="https://github.com/Roblox/place-ci-cd-demo" target="_blank" rel="noopener"
>CI/CD&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;h1 id="インストール">インストール
&lt;/h1>
&lt;blockquote class="alert alert-tip">
&lt;p class="alert-heading">
💡
Tip
&lt;/p>
&lt;p>&amp;ldquo;Use this template&amp;quot;ボタンから使えます。&lt;/p>
&lt;/blockquote>
&lt;h2 id="rokitのインストール">Rokitのインストール
&lt;/h2>&lt;p>Windows (PowerShell)&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-powershell" data-lang="powershell">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">Invoke-RestMethod&lt;/span> &lt;span class="n">https&lt;/span>&lt;span class="err">:&lt;/span>&lt;span class="p">//&lt;/span>&lt;span class="n">raw&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="py">githubusercontent&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">com&lt;/span>&lt;span class="p">/&lt;/span>&lt;span class="nb">rojo-rbx&lt;/span>&lt;span class="p">/&lt;/span>&lt;span class="n">rokit&lt;/span>&lt;span class="p">/&lt;/span>&lt;span class="n">main&lt;/span>&lt;span class="p">/&lt;/span>&lt;span class="n">scripts&lt;/span>&lt;span class="p">/&lt;/span>&lt;span class="n">install&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="py">ps1&lt;/span> &lt;span class="p">|&lt;/span> &lt;span class="nb">Invoke-Expression&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>macOS / Linux&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">curl -fsSL https://raw.githubusercontent.com/rojo-rbx/rokit/main/scripts/install.sh &lt;span class="p">|&lt;/span> sh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="rojoやwallyなどのインストール">RojoやWallyなどのインストール
&lt;/h2>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">rokit add rojo
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">rokit add wally
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">rokit add wally-package-types
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="パッケージのインストール">パッケージのインストール
&lt;/h2>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">wally install
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">rojo sourcemap default.project.json --output sourcemap.json
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">wally-package-types -s sourcemap.json Packages/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">wally-package-types -s sourcemap.json ServerPackages/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">wally-package-types -s sourcemap.json DevPackages/
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="vscode拡張機能のインストール">VSCode拡張機能のインストール
&lt;/h2>&lt;p>このプロジェクトを開くとVSCodeで以下の拡張機能が表示されるのでインストールします。&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://marketplace.visualstudio.com/items?itemName=evaera.vscode-rojo" target="_blank" rel="noopener"
>Rojo&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://marketplace.visualstudio.com/items?itemName=JohnnyMorganz.luau-lsp" target="_blank" rel="noopener"
>Luau Language Server&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://marketplace.visualstudio.com/items?itemName=Kampfkarren.selene-vscode" target="_blank" rel="noopener"
>Selene&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://marketplace.visualstudio.com/items?itemName=JohnnyMorganz.stylua" target="_blank" rel="noopener"
>StyLua&lt;/a>&lt;/li>
&lt;/ul>
&lt;h1 id="使い方">使い方
&lt;/h1>&lt;h2 id="vscodeからrojo">VSCodeからRojo
&lt;/h2>&lt;p>「Ctrl + Shift + P」&lt;/p>
&lt;p>「Rojo: Open Menu」&lt;/p>
&lt;blockquote class="alert alert-note">
&lt;p class="alert-heading">
ℹ️
Note
&lt;/p>
&lt;p>初めてならRoblox Studioを起動して、Install Roblox Studio Plugin&lt;/p>
&lt;/blockquote>
&lt;p>「▶ default.project.json」&lt;/p>
&lt;p>&lt;img src="https://takoyakisoft.com/p/roblox-luau-template-for-modern-development/Code_m5RjRhSECe.webp"
width="1260"
height="860"
srcset="https://takoyakisoft.com/p/roblox-luau-template-for-modern-development/Code_m5RjRhSECe_hu_f5c6a58a949c0197.webp 480w, https://takoyakisoft.com/p/roblox-luau-template-for-modern-development/Code_m5RjRhSECe_hu_67808a5262379ac3.webp 1024w"
loading="lazy"
alt="VSCodeからRojoの起動方法"
class="gallery-image"
data-flex-grow="146"
data-flex-basis="351px"
>&lt;/p>
&lt;h2 id="roblox-studioからrojo">Roblox StudioからRojo
&lt;/h2>&lt;p>「プラグイン」タブ&lt;/p>
&lt;p>「Rojo」リボン&lt;/p>
&lt;p>「Connect」ボタン&lt;/p>
&lt;p>&lt;img src="https://takoyakisoft.com/p/roblox-luau-template-for-modern-development/roblox-luau-template-for-modern-development.webp"
width="1342"
height="983"
srcset="https://takoyakisoft.com/p/roblox-luau-template-for-modern-development/roblox-luau-template-for-modern-development_hu_8ffd71bbf5e6b12f.webp 480w, https://takoyakisoft.com/p/roblox-luau-template-for-modern-development/roblox-luau-template-for-modern-development_hu_230b7f572a692276.webp 1024w"
loading="lazy"
alt="Roblox StudioからRojoの接続方法"
class="gallery-image"
data-flex-grow="136"
data-flex-basis="327px"
>&lt;/p>
&lt;h2 id="wallyにパッケージを追加">Wallyにパッケージを追加
&lt;/h2>&lt;p>wally.tomlをVSCodeで編集します。&lt;/p>
&lt;p>&lt;a class="link" href="https://wally.run/" target="_blank" rel="noopener"
>wally.run&lt;/a>のサイトで欲しいパッケージを調べて「Install」でパッケージ名をコピーします。&lt;/p>
&lt;p>各セクションの分類は&lt;/p>
&lt;p>[dependencies]がクライアントとサーバー&lt;/p>
&lt;p>[server-dependencies]がサーバーのみ&lt;/p>
&lt;p>[dev-dependencies]が開発やテストのみ&lt;/p>
&lt;p>書き終えたら、再度&lt;a class="link" href="#%e3%83%91%e3%83%83%e3%82%b1%e3%83%bc%e3%82%b8%e3%81%ae%e3%82%a4%e3%83%b3%e3%82%b9%e3%83%88%e3%83%bc%e3%83%ab" >パッケージのインストール&lt;/a>を行います。&lt;/p>
&lt;h1 id="参考">参考
&lt;/h1>&lt;p>&lt;a class="link" href="https://www.youtube.com/watch?v=IJDg6tRJmHo" target="_blank" rel="noopener"
>How Big Studios Develop on Roblox&lt;/a>&lt;/p></description></item><item><title>Rovo Dev CLI実践ガイド：VSCodeとWSL2で快適に使う方法</title><link>https://takoyakisoft.com/p/rovo-dev-cli-guide-wsl2-blender/</link><pubDate>Thu, 19 Jun 2025 15:05:00 +0900</pubDate><guid>https://takoyakisoft.com/p/rovo-dev-cli-guide-wsl2-blender/</guid><description>&lt;img src="https://takoyakisoft.com/p/rovo-dev-cli-guide-wsl2-blender/rovo-dev-cli-guide-wsl2-blender.webp" alt="Featured image of post Rovo Dev CLI実践ガイド：VSCodeとWSL2で快適に使う方法" />&lt;p>こんにちは！&lt;/p>
&lt;p>ちなみに、この記事もRovo Dev CLIのAIアシスタント機能を使って書いてるんですよ。便利ですよね！&lt;/p>
&lt;p>今回はAtlassianが作った開発AIエージェント「Rovo Dev CLI」について解説していこうと思います。&lt;/p>
&lt;p>これは人気の「Claude Code」みたいなツールです。ターミナル上でAIとおしゃべりしながら、コーディングを手伝ってもらったり、テストを作ってもらったり、リファクタリングをお願いしたり、色々なことに使えます。しかも今はベータ期間中なので無料で利用できるんです。&lt;/p>
&lt;p>ただ、WindowsのPowerShellでそのまま使うと、日本語が文字化けしちゃうんですよね…。&lt;/p>
&lt;p>でも大丈夫です！
この記事では基本的な使い方から、その文字化け問題を「WSL2」と「VSCode」を使って華麗に解決する方法、さらにはAIに3Dモデリングを指示できてしまう「MCP連携」まで、具体的な手順を交えてご紹介します。&lt;/p>
&lt;h3 id="rovo-dev-cliってなあに">Rovo Dev CLIって、なあに？
&lt;/h3>&lt;p>Rovo Dev CLIはJiraやConfluenceで有名なAtlassianが開発した、コマンドラインで使えるAIアシスタントです。&lt;/p>
&lt;p>Rovo Dev本人に「どのモデルを使ってるの？」って聞いてみたら、Anthropic社のClaudeファミリーを使っているとのことでした。&lt;/p>
&lt;h3 id="windowsユーザーの方はまずここからwsl2のセットアップ">Windowsユーザーの方はまずここから！WSL2のセットアップ
&lt;/h3>&lt;p>WindowsでRovo Dev CLIを使うなら、WSL2 (Windows Subsystem for Linux 2) を使うのが断然おすすめです。
さっきもお話しした通り、PowerShellで直接使うと日本語が文字化けしてしまうからなんです。&lt;/p>
&lt;h4 id="wsl2のインストールと設定">WSL2のインストールと設定
&lt;/h4>&lt;ol>
&lt;li>WSL2のインストール&lt;/li>
&lt;/ol>
&lt;p>「PowerShell」を開いて、このコマンドを実行します。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-powershell" data-lang="powershell">&lt;span class="line">&lt;span class="cl">&lt;span class="n">wsl&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="n">-install&lt;/span> &lt;span class="n">-d&lt;/span> &lt;span class="n">Ubuntu&lt;/span>&lt;span class="p">-&lt;/span>&lt;span class="mf">24.04&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>私の環境だと、一度PCを再起動しないとWSLがうまく起動しませんでした。もし動かなかったら試してみてください。&lt;/p>
&lt;ol start="2">
&lt;li>WSL2の初期設定&lt;/li>
&lt;/ol>
&lt;p>インストールが終わるとUbuntuが起動するので、ユーザー名とパスワードを設定しましょう。&lt;/p>
&lt;ol start="3">
&lt;li>便利なミラーモードネットワークの設定&lt;/li>
&lt;/ol>
&lt;p>WSL2の新しい機能「ミラーモード」を設定すると、WindowsとWSL2の間でネットワークが共有されて、どちらからでも「localhost」でアクセスできるようになります。
これが後で説明するMCP連携ですごく便利になるんです。&lt;/p>
&lt;p>Windowsのユーザーフォルダ（&lt;code>C:\Users\あなたのユーザー名&lt;/code>）に&lt;code>.wslconfig&lt;/code>っていうファイルを作って、以下の内容を書き込みます。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-ini" data-lang="ini">&lt;span class="line">&lt;span class="cl">&lt;span class="k">[wsl2]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">networkingMode&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">mirrored&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>メニューの「WSL Settings」からも同じことができますよ。&lt;/p>
&lt;p>&lt;img src="https://takoyakisoft.com/p/rovo-dev-cli-guide-wsl2-blender/wslsettings_mirrored.webp"
width="1346"
height="853"
srcset="https://takoyakisoft.com/p/rovo-dev-cli-guide-wsl2-blender/wslsettings_mirrored_hu_d9bde27503199c09.webp 480w, https://takoyakisoft.com/p/rovo-dev-cli-guide-wsl2-blender/wslsettings_mirrored_hu_e3a460c1274db487.webp 1024w"
loading="lazy"
alt="WSL Settings Mirroed"
class="gallery-image"
data-flex-grow="157"
data-flex-basis="378px"
>&lt;/p>
&lt;ol start="4">
&lt;li>WSL2の再起動&lt;/li>
&lt;/ol>
&lt;p>設定を反映させるために、PowerShellでこのコマンドを実行します。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-powershell" data-lang="powershell">&lt;span class="line">&lt;span class="cl">&lt;span class="n">wsl&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="n">-shutdown&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>そのあと、WSL2（Ubuntu）をもう一度起動してくださいね。&lt;/p>
&lt;p>これでWSL2の環境はバッチリです。
次のステップでは、VSCodeからこのWSL2環境につないで、もっと快適に操作できるようにしていきます。&lt;/p>
&lt;h3 id="vscodeからwsl2に接続しよう">VSCodeからWSL2に接続しよう
&lt;/h3>&lt;p>ここからの操作は、全部VSCodeのWSL拡張機能を使ってやっていきますね。&lt;/p>
&lt;h4 id="vscodeのwsl拡張機能のインストールと接続手順">VSCodeのWSL拡張機能のインストールと接続手順
&lt;/h4>&lt;ol>
&lt;li>VSCodeのインストール&lt;/li>
&lt;/ol>
&lt;p>もし、まだインストールしていなかったら、&lt;a class="link" href="https://code.visualstudio.com/" target="_blank" rel="noopener"
>公式サイト&lt;/a>からダウンロードしてインストールしてください。&lt;/p>
&lt;ol start="2">
&lt;li>WSL拡張機能のインストール&lt;/li>
&lt;/ol>
&lt;p>VSCodeを起動して、左側にある拡張機能タブ（Ctrl+Shift+X）から「WSL」って検索してインストールします。&lt;/p>
&lt;ol start="3">
&lt;li>WSL2に接続&lt;/li>
&lt;/ol>
&lt;p>VSCodeウィンドウの左下にある緑色のアイコンをクリックして、「ディストリビューションを使用してWSLに接続&amp;hellip;」を選びます。
&lt;img src="https://takoyakisoft.com/p/rovo-dev-cli-guide-wsl2-blender/Code_WBcZxHa7dq.webp"
width="1260"
height="860"
srcset="https://takoyakisoft.com/p/rovo-dev-cli-guide-wsl2-blender/Code_WBcZxHa7dq_hu_32d522f9ee87f2f0.webp 480w, https://takoyakisoft.com/p/rovo-dev-cli-guide-wsl2-blender/Code_WBcZxHa7dq_hu_bc26e0a0fef78f01.webp 1024w"
loading="lazy"
alt="ディストリビューションを使用してWSLに接続…"
class="gallery-image"
data-flex-grow="146"
data-flex-basis="351px"
>&lt;/p>
&lt;ol start="4">
&lt;li>Ubuntu-24.04を選択&lt;/li>
&lt;/ol>
&lt;p>さっきインストールしたUbuntu-24.04を選択します。&lt;/p>
&lt;p>&lt;img src="https://takoyakisoft.com/p/rovo-dev-cli-guide-wsl2-blender/Code_ZY48s5zfnI.webp"
width="1260"
height="860"
srcset="https://takoyakisoft.com/p/rovo-dev-cli-guide-wsl2-blender/Code_ZY48s5zfnI_hu_649fc219f7f3a0c2.webp 480w, https://takoyakisoft.com/p/rovo-dev-cli-guide-wsl2-blender/Code_ZY48s5zfnI_hu_76245b7a39596d1e.webp 1024w"
loading="lazy"
alt="Ubuntu-24.04"
class="gallery-image"
data-flex-grow="146"
data-flex-basis="351px"
>&lt;/p>
&lt;ol start="5">
&lt;li>ターミナルを開く&lt;/li>
&lt;/ol>
&lt;p>VSCodeのメニューから「ターミナル」→「新しいターミナル」を選ぶか、ショートカットキーの&lt;code>Ctrl+`&lt;/code>を押してターミナルを開きます。
画像みたいに開いてもOKです。
&lt;img src="https://takoyakisoft.com/p/rovo-dev-cli-guide-wsl2-blender/Code_ITaou93KJA.webp"
width="1260"
height="860"
srcset="https://takoyakisoft.com/p/rovo-dev-cli-guide-wsl2-blender/Code_ITaou93KJA_hu_9a20e5f852c191f9.webp 480w, https://takoyakisoft.com/p/rovo-dev-cli-guide-wsl2-blender/Code_ITaou93KJA_hu_e44f23638998901a.webp 1024w"
loading="lazy"
alt="bashターミナルを開く"
class="gallery-image"
data-flex-grow="146"
data-flex-basis="351px"
>&lt;/p>
&lt;p>これで、VSCodeからWSL2のUbuntuにアクセスする準備はOKです！
これからの操作は、このVSCode上のターミナルでやっていきましょう。
ファイルの編集や作成も、VSCodeのエディタが使えるのでとっても楽ちんですよ。&lt;/p>
&lt;h3 id="インストールと最初のセットアップ">インストールと最初のセットアップ
&lt;/h3>&lt;ol>
&lt;li>ACLI (Atlassian CLI) のインストール&lt;/li>
&lt;/ol>
&lt;p>Rovo Devは、ACLIっていうAtlassianの共通ツール経由で使います。まずはこれをWSL2のUbuntuにインストールしていきましょう。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 必要なパッケージをインストールします&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo apt-get install -y wget gnupg2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># APTリポジトリの設定をします&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 鍵の保存先ディレクトリを作成&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo mkdir -p -m &lt;span class="m">755&lt;/span> /etc/apt/keyrings
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 公開鍵をダウンロードしてGPG形式に変換&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">wget -nv -O- https://acli.atlassian.com/gpg/public-key.asc &lt;span class="p">|&lt;/span> sudo gpg --dearmor -o /etc/apt/keyrings/acli-archive-keyring.gpg
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 鍵ファイルの権限を設定&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo chmod go+r /etc/apt/keyrings/acli-archive-keyring.gpg
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># リポジトリ情報をAPTの設定に追加&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;deb [arch=&lt;/span>&lt;span class="k">$(&lt;/span>dpkg --print-architecture&lt;span class="k">)&lt;/span>&lt;span class="s2"> signed-by=/etc/apt/keyrings/acli-archive-keyring.gpg] https://acli.atlassian.com/linux/deb stable main&amp;#34;&lt;/span> &lt;span class="p">|&lt;/span> sudo tee /etc/apt/sources.list.d/acli.list &amp;gt; /dev/null
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># ACLIをインストールします&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo apt update
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo apt install -y acli
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>もし他のOSを使っている場合は、公式サイトの&lt;a class="link" href="https://developer.atlassian.com/cloud/acli/guides/install-acli/" target="_blank" rel="noopener"
>Install and update&lt;/a>に手順がありますよ。&lt;/p>
&lt;ol start="2">
&lt;li>Atlassian APIトークンの取得と認証&lt;/li>
&lt;/ol>
&lt;p>次に、AtlassianアカウントでログインするためのAPIトークンをもらいにいきましょう。&lt;/p>
&lt;ol>
&lt;li>&lt;a class="link" href="https://id.atlassian.com/manage-profile/security/api-tokens" target="_blank" rel="noopener"
>Atlassian IDのプロファイル&lt;/a>にアクセスします。&lt;/li>
&lt;li>「Create API token」をクリックして、わかりやすい名前（例えば &lt;code>rovo-dev-cli&lt;/code> とか）をつけてトークンを作ります。&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://takoyakisoft.com/p/rovo-dev-cli-guide-wsl2-blender/chrome_0jJE2KADTx.webp"
width="1020"
height="831"
srcset="https://takoyakisoft.com/p/rovo-dev-cli-guide-wsl2-blender/chrome_0jJE2KADTx_hu_5ae329d25921ff9a.webp 480w, https://takoyakisoft.com/p/rovo-dev-cli-guide-wsl2-blender/chrome_0jJE2KADTx_hu_b6800cc2d16130e5.webp 1024w"
loading="lazy"
alt="APIトークンの管理画面"
class="gallery-image"
data-flex-grow="122"
data-flex-basis="294px"
>&lt;/p>
&lt;ol start="3">
&lt;li>生成されたトークンは一度しか表示されないので、必ずコピーしてどこかにメモしておいてくださいね！&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://takoyakisoft.com/p/rovo-dev-cli-guide-wsl2-blender/chrome_Nb3KGfQ2yp.webp"
width="1020"
height="831"
srcset="https://takoyakisoft.com/p/rovo-dev-cli-guide-wsl2-blender/chrome_Nb3KGfQ2yp_hu_4f397613aae13f7a.webp 480w, https://takoyakisoft.com/p/rovo-dev-cli-guide-wsl2-blender/chrome_Nb3KGfQ2yp_hu_e4edfcd1e5c3dea.webp 1024w"
loading="lazy"
alt="APIトークンを作成"
class="gallery-image"
data-flex-grow="122"
data-flex-basis="294px"
>&lt;/p>
&lt;p>トークンが準備できたら、ターミナルでこのコマンドを実行して認証します。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">acli rovodev auth login
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>メールアドレスと、さっきコピーしたAPIトークンを貼り付ければ認証完了です。&lt;/p>
&lt;p>&lt;img src="https://takoyakisoft.com/p/rovo-dev-cli-guide-wsl2-blender/Code_d3pJFXWTQN.webp"
width="1260"
height="860"
srcset="https://takoyakisoft.com/p/rovo-dev-cli-guide-wsl2-blender/Code_d3pJFXWTQN_hu_d460bb5fecbfdf8a.webp 480w, https://takoyakisoft.com/p/rovo-dev-cli-guide-wsl2-blender/Code_d3pJFXWTQN_hu_fe12b8998d5cfe4e.webp 1024w"
loading="lazy"
alt="acli rovodev auth login"
class="gallery-image"
data-flex-grow="146"
data-flex-basis="351px"
>&lt;/p>
&lt;ol start="3">
&lt;li>起動！&lt;/li>
&lt;/ol>
&lt;p>さあ、いよいよAIエージェントを起動します。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">acli rovodev run
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>これを実行すると、ターミナルがAIとの対話モードに切り替わります。ワクワクしますね！&lt;/p>
&lt;h3 id="知っておくと便利基本的な使い方">知っておくと便利！基本的な使い方
&lt;/h3>&lt;p>Rovo Dev CLIには、開発がぐっと楽になる機能がたくさんあります。&lt;/p>
&lt;h4 id="カスタムプロンプトカスタムインストラクション">カスタムプロンプト（カスタムインストラクション）
&lt;/h4>&lt;p>毎回同じことをお願いするのって、ちょっと面倒ですよね。そういう時に便利なのが、このカスタムプロンプト機能です。AIにあらかじめ前提知識を教えておけるんですよ。Claudeのデスクトップ版にある&lt;code>CLAUDE.md&lt;/code>みたいな感じで設定できます。&lt;/p>
&lt;p>設定方法は3種類あります。&lt;/p>
&lt;ol>
&lt;li>グローバル設定ファイル
&lt;code>~/.rovodev/config.yml&lt;/code> にこんな感じで書きます。PC全体で有効な指示ですね。&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">additionalSystemPrompt&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">|&lt;/span>&lt;span class="sd">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> あなたはPythonとTypeScriptの専門家です。
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> コードを書く際は、常にテストを含めてください。
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> 説明は簡潔に、日本語で行ってください。&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="2">
&lt;li>グローバルエージェントファイル
&lt;code>~/.rovodev/.agent.md&lt;/code> というファイルに、AIに読み込ませたい指示を書きます。Markdown形式なので、もっと詳しく書けますよ。&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-markdown" data-lang="markdown">&lt;span class="line">&lt;span class="cl">&lt;span class="gh"># 開発者向けガイドライン
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gh">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gu">## コーディングスタイル
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gu">&lt;/span>&lt;span class="k">-&lt;/span> インデントは2スペースを使用する
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">-&lt;/span> 関数名はcamelCaseで記述する
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">-&lt;/span> クラス名はPascalCaseで記述する
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gu">## テスト方針
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gu">&lt;/span>&lt;span class="k">-&lt;/span> ユニットテストは必須
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">-&lt;/span> モックを活用してテストを高速化する
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="3">
&lt;li>プロジェクト固有の指示
作業しているリポジトリのルートに &lt;code>.agent.md&lt;/code>ファイルを作ります。これはチームで共有するルールを書くのに便利です。個人的な設定は &lt;code>.agent.local.md&lt;/code> に書いておけば、Gitの管理対象外にできるのでおすすめです。&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-markdown" data-lang="markdown">&lt;span class="line">&lt;span class="cl">&lt;span class="gh"># プロジェクト固有のガイドライン
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gh">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">このプロジェクトは、Next.jsとTypeScriptを使用したWebアプリケーションです。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gu">## アーキテクチャ
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gu">&lt;/span>&lt;span class="k">-&lt;/span> pages/ - ルーティング用のページコンポーネント
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">-&lt;/span> components/ - 再利用可能なUIコンポーネント
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">-&lt;/span> lib/ - ユーティリティ関数やヘルパー
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">-&lt;/span> styles/ - CSSモジュールとグローバルスタイル
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gu">## 開発ルール
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gu">&lt;/span>&lt;span class="k">-&lt;/span> コンポーネントは関数コンポーネントで作成する
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">-&lt;/span> 状態管理にはReact Hooksを使用する
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">-&lt;/span> APIリクエストはSWRを使用する
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>これらの設定は全部組み合わせて使えるので、AIはすべての指示を考慮して答えてくれます。効果的なカスタムインストラクションを書くことで、AIからもっと質の高い回答がもらえるようになりますよ。&lt;/p>
&lt;h4 id="コマンドの例">コマンドの例
&lt;/h4>&lt;p>対話モードでは、こんな風にお願いできます。&lt;/p>
&lt;ul>
&lt;li>&lt;code>summarize this file ./path/to/file.js&lt;/code>: このファイルを要約して！&lt;/li>
&lt;li>&lt;code>add unit tests for UserService&lt;/code>: UserServiceのユニットテストを書いて！&lt;/li>
&lt;li>&lt;code>Refactor this complex function to be more readable&lt;/code>: この複雑な関数を読みやすく書き直して！&lt;/li>
&lt;/ul>
&lt;p>AIがディレクトリの構造をちゃんと理解してくれるので、ファイルパスを渡すだけで文脈を読み取ってくれるのが賢いところですね。&lt;/p>
&lt;h4 id="対話モードの便利なコマンド一覧">対話モードの便利なコマンド一覧
&lt;/h4>&lt;p>対話モードには、他にも便利なコマンドがいっぱいあります。AIとのやりとりがもっとスムーズになりますよ。もしコマンドの詳しい使い方が知りたくなったら、対話モードで &lt;code>/コマンド名 help&lt;/code> と入力してみてください。&lt;/p>
&lt;h4 id="セッション管理-sessions">セッション管理 &lt;code>/sessions&lt;/code>
&lt;/h4>&lt;p>セッションを管理するコマンドです。これを使うと、会話の履歴や文脈を別々に分けておけるのですごく便利ですよ。&lt;/p>
&lt;ul>
&lt;li>主な機能:
&lt;ul>
&lt;li>セッション管理: 複数の会話セッションを作ったり、切り替えたりできます。&lt;/li>
&lt;li>コンテキスト保持: 各セッションは、それぞれ独自の会話履歴を覚えています。&lt;/li>
&lt;li>ワークスペース分離: プロジェクトごとにセッションを分けられます。&lt;/li>
&lt;li>セッションのフォーク: 今の会話から分岐して、新しいセッションを作ることも可能です。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>Rovo Dev CLIを再起動するときに &lt;code>--restore&lt;/code> っていうオプションをつけると、前のセッションを自動で復元してくれます。&lt;/p>
&lt;h4 id="セッションのクリア-clear">セッションのクリア &lt;code>/clear&lt;/code>
&lt;/h4>&lt;p>今のセッションの会話履歴を全部消して、まっさらな状態に戻します。この操作は元に戻せないので注意してくださいね。履歴を残しておきたい場合は、&lt;code>/sessions&lt;/code> コマンドで新しいセッションを作るか、次に紹介する &lt;code>/prune&lt;/code> コマンドを使いましょう。&lt;/p>
&lt;h4 id="セッションの最適化-prune">セッションの最適化 &lt;code>/prune&lt;/code>
&lt;/h4>&lt;p>会話が長くなってきたなって時に使います。大事なところは残しつつ、トークンを節約してくれる賢いコマンドです。AIが実行したツール（プログラム）の結果とかを削除して、履歴をスリムにしてくれます。&lt;/p>
&lt;h4 id="事前定義された指示テンプレート-instructions">事前定義された指示テンプレート &lt;code>/instructions&lt;/code>
&lt;/h4>&lt;p>コードレビューとかドキュメント作成みたいによくある作業のために、あらかじめ用意された指示のテンプレートを実行できます。&lt;/p>
&lt;ul>
&lt;li>組み込みの指示テンプレート:
&lt;ul>
&lt;li>コードレビューと分析&lt;/li>
&lt;li>ドキュメント生成と改善&lt;/li>
&lt;li>ユニットテスト作成とカバレッジ改善&lt;/li>
&lt;li>Confluenceページの要約&lt;/li>
&lt;li>Jira課題の分析&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>自分でカスタムテンプレートも作れますよ！&lt;/p>
&lt;ol>
&lt;li>&lt;code>.rovodev/instuctions.yml&lt;/code> に指示ファイルを作成します。&lt;/li>
&lt;li>&lt;code>.rovodev&lt;/code> フォルダの中に、指示の内容を書いたMarkdownファイルを作ります。&lt;/li>
&lt;/ol>
&lt;p>使い方は簡単で、&lt;code>/instructions&lt;/code>と打つとテンプレートの一覧が出てきます。&lt;/p>
&lt;h4 id="メモリ管理-memory">メモリ管理 &lt;code>/memory&lt;/code>
&lt;/h4>&lt;p>プロジェクトや設定に関する大事な情報を、Rovo Dev CLIに覚えておいてもらうための機能です。&lt;/p>
&lt;ul>
&lt;li>メモリの種類:
&lt;ul>
&lt;li>プロジェクトメモリ: 今いるディレクトリに保存されます。（&lt;code>.agent.md&lt;/code> と &lt;code>.agent.local.md&lt;/code>）&lt;/li>
&lt;li>ユーザーメモリ: ホームディレクトリにグローバルに保存されます。（&lt;code>~/.rovodev/agent.md&lt;/code>）&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>メモリファイルはMarkdown形式で、プロジェクトのルールやコーディングの決まり事などを書いておくと便利です。
&lt;code># メモしたいこと&lt;/code>みたいに書くと、さっとメモを追加できますよ。&lt;/p>
&lt;h4 id="フィードバック-feedback">フィードバック &lt;code>/feedback&lt;/code>
&lt;/h4>&lt;p>Rovo Dev CLIについての感想やバグ報告を送るためのコマンドです。&lt;/p>
&lt;h4 id="使用状況-usage">使用状況 &lt;code>/usage&lt;/code>
&lt;/h4>&lt;p>今日のLLMトークン使用量を確認できます。使いすぎてないかチェック！&lt;/p>
&lt;h4 id="終了-exit">終了 &lt;code>/exit&lt;/code>
&lt;/h4>&lt;p>アプリケーションを終了します。&lt;code>/quit&lt;/code>や&lt;code>/q&lt;/code>でも同じです。&lt;/p>
&lt;h3 id="応用編wsl2とwindows間の連携">【応用編】WSL2とWindows間の連携
&lt;/h3>&lt;p>VSCodeのWSL拡張機能のおかげで、WSL2とWindowsの間のファイル共有やアプリ連携がすごくスムーズになります。&lt;/p>
&lt;h4 id="ミラーモードネットワークの活用">ミラーモードネットワークの活用
&lt;/h4>&lt;p>最初に設定したWSL2のミラーモードネットワーク、これが大活躍します。&lt;/p>
&lt;ol>
&lt;li>ポートの共有: WSL2で立ち上げたサーバー（例えば &lt;code>localhost:3000&lt;/code>）に、Windowsのブラウザから直接アクセスできます。&lt;/li>
&lt;li>ネットワークサービスの共有: WindowsとWSL2の両方から、同じネットワーク上のサービスを使えます。&lt;/li>
&lt;li>MCPサーバーとの連携: この機能が、次で説明するMCP連携で特に重要になります。WSL2のRovo Dev CLIから、Windowsで動いているBlenderのMCPサーバーにシームレスに接続できるようになるんです。&lt;/li>
&lt;/ol>
&lt;p>この連携のおかげで、Windowsの使いやすい画面と、Linuxのパワフルなコマンドラインのいいとこどりができるんですよ。&lt;/p>
&lt;h3 id="応用mcpでblenderをaiに操作させてみよう">【応用】MCPでBlenderをAIに操作させてみよう！
&lt;/h3>&lt;p>いよいよ仕上げです！Rovo Devの強力な機能、MCP (Model Context Protocol) を使って、WSL2からWindows上のBlenderを動かしてみましょう。今回は&lt;a class="link" href="https://github.com/ahujasid/blender-mcp" target="_blank" rel="noopener"
>BlenderMCP&lt;/a>という便利なオープンソースツールを使わせてもらいます。&lt;/p>
&lt;h4 id="blendermcpって何">BlenderMCPって何？
&lt;/h4>&lt;p>BlenderMCPはAIとBlenderをつないでくれるツールです。これを使うと、AIがBlenderを直接操作して、3Dモデリングやシーン作成、オブジェクトの操作なんかをやってくれるようになるんです！&lt;/p>
&lt;p>主な機能&lt;/p>
&lt;ul>
&lt;li>双方向通信: AIとBlenderを接続します&lt;/li>
&lt;li>オブジェクト操作: モノを作ったり、動かしたり、消したりできます&lt;/li>
&lt;li>マテリアル制御: 色を塗ったり、質感を設定したりできます&lt;/li>
&lt;li>シーン検査: 今Blenderで何がどうなっているかAIが確認できます&lt;/li>
&lt;li>コード実行: AIからBlenderにPythonコードを送って実行させられます&lt;/li>
&lt;/ul>
&lt;h4 id="セットアップ手順">セットアップ手順
&lt;/h4>&lt;p>BlenderMCPは2つの部品でできています。&lt;/p>
&lt;ol>
&lt;li>Windows側: Blenderアドオン (&lt;code>addon.py&lt;/code>): WindowsのBlenderにインストールします&lt;/li>
&lt;li>WSL2側: MCPサーバー: WSL2のUbuntuにインストールして、Rovo Dev CLIから使います&lt;/li>
&lt;/ol>
&lt;p>では、セットアップしていきましょう！&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Windows側: Blenderアドオンのインストール&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://github.com/ahujasid/blender-mcp" target="_blank" rel="noopener"
>BlenderMCPのGitHubリポジトリ&lt;/a>から&lt;code>addon.py&lt;/code>をダウンロードします&lt;/li>
&lt;li>Blenderを開いて、「編集」&amp;gt;「プリファレンス」&amp;gt;「アドオン」と進みます&lt;/li>
&lt;li>「ディスクからインストール&amp;hellip;」をクリックして、ダウンロードした&lt;code>addon.py&lt;/code>ファイルを選びます&lt;/li>
&lt;li>「Blender MCP」の横にあるチェックボックスをオンにして、アドオンを有効にします&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://takoyakisoft.com/p/rovo-dev-cli-guide-wsl2-blender/blender_XHT4DlH7dm.webp"
width="722"
height="612"
srcset="https://takoyakisoft.com/p/rovo-dev-cli-guide-wsl2-blender/blender_XHT4DlH7dm_hu_1e1089fa1e9d5605.webp 480w, https://takoyakisoft.com/p/rovo-dev-cli-guide-wsl2-blender/blender_XHT4DlH7dm_hu_6b98af69362a6108.webp 1024w"
loading="lazy"
alt="blenderアドオンインストール画面"
class="gallery-image"
data-flex-grow="117"
data-flex-basis="283px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>WSL2側: uvパッケージマネージャーのインストール&lt;/p>
&lt;ul>
&lt;li>WSL2のUbuntuターミナルで、このコマンドを実行します&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># uvパッケージマネージャーをインストール&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">curl -LsSf https://astral.sh/uv/install.sh &lt;span class="p">|&lt;/span> sh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>WSL2側: Rovo Dev CLIの設定&lt;/p>
&lt;ul>
&lt;li>VSCodeを使って設定ファイルを編集しましょう&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">export&lt;/span> &lt;span class="nv">EDITOR&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;code&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">acli rovodev mcp
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>するとVSCodeで設定ファイルが開くので、以下の内容を追加します。これはRovo Dev CLIが起動するときに自動でBlenderMCPも動かすための設定です&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;mcpServers&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;blender&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;command&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;uvx&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;args&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;blender-mcp&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>Windows側: Blenderでの接続設定&lt;/p>
&lt;ul>
&lt;li>Blenderの画面で、3Dビューのサイドバーを開きます（もし表示されていなければNキーを押してください）&lt;/li>
&lt;li>「BlenderMCP」というタブを見つけて、「Connect to MCP server」をクリックします&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://takoyakisoft.com/p/rovo-dev-cli-guide-wsl2-blender/blender_kgZFzsrLFE.webp"
width="1128"
height="772"
srcset="https://takoyakisoft.com/p/rovo-dev-cli-guide-wsl2-blender/blender_kgZFzsrLFE_hu_dbe03a72ecde385f.webp 480w, https://takoyakisoft.com/p/rovo-dev-cli-guide-wsl2-blender/blender_kgZFzsrLFE_hu_cfe479678a85ae3b.webp 1024w"
loading="lazy"
alt="blenderMCPサーバー接続"
class="gallery-image"
data-flex-grow="146"
data-flex-basis="350px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>WSL2側: Rovo Dev CLIでBlenderを操作！&lt;/p>
&lt;ul>
&lt;li>WSL2のVSCode統合ターミナルで &lt;code>acli rovodev run&lt;/code> を実行します&lt;/li>
&lt;li>AIにこんな風にお願いしてみましょう&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">Blenderを使って、猫を作成してください。
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>するとどうでしょう！WSL2からの指示で、Windowsで起動しているBlenderの画面に立方体が現れ、スッと上に移動したりするはずです。これが最初に設定したミラーモードネットワークの力なんですね。WSL2は、Windowsで動いているBlenderを「localhost上のサーバー」として認識して、シームレスに連携できちゃうんです。すごい！&lt;/p>
&lt;p>&lt;img src="https://takoyakisoft.com/p/rovo-dev-cli-guide-wsl2-blender/blender_mcp_cat.webp"
width="1200"
height="900"
srcset="https://takoyakisoft.com/p/rovo-dev-cli-guide-wsl2-blender/blender_mcp_cat_hu_adefcca0e568179.webp 480w, https://takoyakisoft.com/p/rovo-dev-cli-guide-wsl2-blender/blender_mcp_cat_hu_6a420429aded544a.webp 1024w"
loading="lazy"
alt="猫の3Dモデル"
class="gallery-image"
data-flex-grow="133"
data-flex-basis="320px"
>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h4 id="mcpのトラブルシューティング">MCPのトラブルシューティング
&lt;/h4>&lt;p>もしうまく動かない場合は、こんなところを確認してみてください。&lt;/p>
&lt;ol>
&lt;li>接続の問題: Blenderのアドオンは有効になっていますか？BlenderのMCPタブで「Connect to MCP server」をクリックしましたか？&lt;/li>
&lt;li>WSL2のミラーモードネットワーク: ミラーモードがちゃんと有効になっているか確認してみてください&lt;/li>
&lt;li>再起動してみる: 接続エラーが続くようなら、Rovo Dev CLIとBlenderの両方を再起動してみるのが手っ取り早いかもしれません&lt;/li>
&lt;li>コマンドの実行方法: &lt;code>uvx blender-mcp&lt;/code>コマンドは直接実行しないでくださいね。Rovo Dev CLIが設定ファイルをもとに自動で実行してくれます&lt;/li>
&lt;/ol>
&lt;p>一番大事なのは、WSL2とWindowsの間のネットワーク接続がミラーモードで正しく設定されていることです。&lt;/p>
&lt;h3 id="まとめ">まとめ
&lt;/h3>&lt;p>今回はAtlassianの新しいAI開発ツール「Rovo Dev CLI」の基本的な使い方から、Windowsユーザーが快適に使うためのWSL2活用術、そしてMCPを使ったBlender連携まで、幅広くご紹介しました。&lt;/p>
&lt;p>最初は少し設定が必要で大変かもしれませんが、一度環境を整えてしまえば、ターミナルから一歩も出ずにAIの強力なサポートを受けられる開発体験は本当に革命的だと思います。&lt;/p>
&lt;p>Rovo Dev CLIはまだベータ版なので、これからどんどん進化していくのが楽しみですね。
この記事が皆さんの新しい開発スタイルを見つける手助けになれば嬉しいです。&lt;/p>
&lt;p>ぜひこの未来のツールを試してみてくださいね。Happy coding! 🎉&lt;/p></description></item><item><title>xAI（Grok API）の登録とVSCode拡張機能（Cody、Cline、Roo Code）での使い方</title><link>https://takoyakisoft.com/p/registering-xai-grok-api-and-using-it-with-vscode-extensions-cody-cline-roo-code/</link><pubDate>Thu, 20 Feb 2025 00:00:00 +0900</pubDate><guid>https://takoyakisoft.com/p/registering-xai-grok-api-and-using-it-with-vscode-extensions-cody-cline-roo-code/</guid><description>&lt;img src="https://takoyakisoft.com/p/registering-xai-grok-api-and-using-it-with-vscode-extensions-cody-cline-roo-code/xai_payment.webp" alt="Featured image of post xAI（Grok API）の登録とVSCode拡張機能（Cody、Cline、Roo Code）での使い方" />&lt;h2 id="xaiに5ドル課金して毎月150ドル分のクレジットをもらう方法">xAIに5ドル課金して毎月150ドル分のクレジットをもらう方法
&lt;/h2>&lt;p>以下の記事を参考にしてxAIに登録しました。&lt;/p>
&lt;p>&lt;a class="link" href="https://zenn.dev/schroneko/articles/de3a8f574e9ea4" target="_blank" rel="noopener"
>Grok API にて $5 課金すると $150 分使えるようになるらしい？&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://console.x.ai/" target="_blank" rel="noopener"
>xAI Cloud Console&lt;/a>に行きます。&lt;/p>
&lt;p>&lt;img src="https://takoyakisoft.com/p/registering-xai-grok-api-and-using-it-with-vscode-extensions-cody-cline-roo-code/xai_payment.webp"
width="2068"
height="1100"
srcset="https://takoyakisoft.com/p/registering-xai-grok-api-and-using-it-with-vscode-extensions-cody-cline-roo-code/xai_payment_hu_81143d937529a41c.webp 480w, https://takoyakisoft.com/p/registering-xai-grok-api-and-using-it-with-vscode-extensions-cody-cline-roo-code/xai_payment_hu_9f2016a5d97f89ce.webp 1024w"
loading="lazy"
alt="xAI Payment"
class="gallery-image"
data-flex-grow="188"
data-flex-basis="451px"
>&lt;/p>
&lt;p>この画像の1、2の順番でクリックして「Billing address」を入力します。&lt;/p>
&lt;p>&lt;img src="https://takoyakisoft.com/p/registering-xai-grok-api-and-using-it-with-vscode-extensions-cody-cline-roo-code/xai_billing_address.webp"
width="533"
height="846"
srcset="https://takoyakisoft.com/p/registering-xai-grok-api-and-using-it-with-vscode-extensions-cody-cline-roo-code/xai_billing_address_hu_2856e0dd944eac5e.webp 480w, https://takoyakisoft.com/p/registering-xai-grok-api-and-using-it-with-vscode-extensions-cody-cline-roo-code/xai_billing_address_hu_40c0645fa7caed74.webp 1024w"
loading="lazy"
alt="xAI Billing Address"
class="gallery-image"
data-flex-grow="63"
data-flex-basis="151px"
>&lt;/p>
&lt;p>画像は例で、英語で記入しました。クレジットカードと同じ住所だと思います。
Tax ID TypeとTax Numberはオプションなので書きませんでした。
税金関係だろうけれど、わかりません。
次に「Payment methods」を入力します。&lt;/p>
&lt;p>&lt;img src="https://takoyakisoft.com/p/registering-xai-grok-api-and-using-it-with-vscode-extensions-cody-cline-roo-code/xai_payment_methods.webp"
width="584"
height="744"
srcset="https://takoyakisoft.com/p/registering-xai-grok-api-and-using-it-with-vscode-extensions-cody-cline-roo-code/xai_payment_methods_hu_8713fae58fdd8b00.webp 480w, https://takoyakisoft.com/p/registering-xai-grok-api-and-using-it-with-vscode-extensions-cody-cline-roo-code/xai_payment_methods_hu_38144f9d12ffc987.webp 1024w"
loading="lazy"
alt="xAI Payment methods"
class="gallery-image"
data-flex-grow="78"
data-flex-basis="188px"
>&lt;/p>
&lt;p>PayPayのJCBカードで通りました。&lt;/p>
&lt;p>&lt;img src="https://takoyakisoft.com/p/registering-xai-grok-api-and-using-it-with-vscode-extensions-cody-cline-roo-code/xai_credits.webp"
width="1956"
height="997"
srcset="https://takoyakisoft.com/p/registering-xai-grok-api-and-using-it-with-vscode-extensions-cody-cline-roo-code/xai_credits_hu_c065380063d48a6e.webp 480w, https://takoyakisoft.com/p/registering-xai-grok-api-and-using-it-with-vscode-extensions-cody-cline-roo-code/xai_credits_hu_32da91709b2bc06d.webp 1024w"
loading="lazy"
alt="xAI Credits"
class="gallery-image"
data-flex-grow="196"
data-flex-basis="470px"
>&lt;/p>
&lt;p>「Redeem Promo code」というプロモコードの入力欄がありましたが、2月20日ではxAIのDeepResearchをしても見つかりませんでした。多分ないようです。
「Purchase credits」からクレジットを購入します。&lt;/p>
&lt;p>&lt;img src="https://takoyakisoft.com/p/registering-xai-grok-api-and-using-it-with-vscode-extensions-cody-cline-roo-code/xai_purchase_credits.webp"
width="542"
height="402"
srcset="https://takoyakisoft.com/p/registering-xai-grok-api-and-using-it-with-vscode-extensions-cody-cline-roo-code/xai_purchase_credits_hu_415c0f11140c9841.webp 480w, https://takoyakisoft.com/p/registering-xai-grok-api-and-using-it-with-vscode-extensions-cody-cline-roo-code/xai_purchase_credits_hu_1a56e4bb6c2f46e8.webp 1024w"
loading="lazy"
alt="xAI Purchase Credits"
class="gallery-image"
data-flex-grow="134"
data-flex-basis="323px"
>&lt;/p>
&lt;p>5ドルで大丈夫でした。
5ドルを課金すると「Share Data」ボタンが表示されますが、スクショを取り忘れました。
次の記事にあるように、xAIとデータを共有する代わりに毎月150ドル分のクレジットがもらえるようです。&lt;/p>
&lt;p>&lt;a class="link" href="https://docs.x.ai/docs/data-sharing" target="_blank" rel="noopener"
>Get $150 in free API credits each month&lt;/a>&lt;/p>
&lt;h2 id="vscodeの拡張機能でxaiを使う方法">VSCodeの拡張機能でxAIを使う方法
&lt;/h2>&lt;h3 id="codyでgrokのapiを使う">CodyでGrokのAPIを使う
&lt;/h3>&lt;p>&lt;a class="link" href="https://marketplace.visualstudio.com/items?itemName=sourcegraph.cody-ai" target="_blank" rel="noopener"
>Cody: AI Code Assistant&lt;/a>はAIを使ったコード補完やコード編集、チャットなどの拡張機能です。
コード補完がずっと無料で、コード編集とチャットは回数制限があります。
なので、コード編集とチャットにGrokのAPIを設定することで、たった5ドルで制限なしのAIエディターを使えるようになります。&lt;/p>
&lt;p>&lt;img src="https://takoyakisoft.com/p/registering-xai-grok-api-and-using-it-with-vscode-extensions-cody-cline-roo-code/vscode_settings.webp"
width="1918"
height="942"
srcset="https://takoyakisoft.com/p/registering-xai-grok-api-and-using-it-with-vscode-extensions-cody-cline-roo-code/vscode_settings_hu_d77133841b6c13c3.webp 480w, https://takoyakisoft.com/p/registering-xai-grok-api-and-using-it-with-vscode-extensions-cody-cline-roo-code/vscode_settings_hu_8d42a7283d7622de.webp 1024w"
loading="lazy"
alt="VSCode settings.json"
class="gallery-image"
data-flex-grow="203"
data-flex-basis="488px"
>&lt;/p>
&lt;p>画像のように「ファイル」→「ユーザー設定」→「設定」から右上のアイコンから「settings.json」を開きます。
別の方法で「Ctrl」 + 「Shift」 + Pを押して「Preferences: Open Settings (JSON)」でも開けます。&lt;/p>
&lt;p>次のように&lt;code>&amp;quot;cody.dev.models&amp;quot;&lt;/code>の中に追加したいモデルを設定します。grokはOpenAI互換のAPIなので&lt;code>&amp;quot;openai&amp;quot;&lt;/code>を指定します。
ついでにDeepSeekとGeminiのAPIも設定しています。DeepSeekも格安で使えるAPIです。
GeminiはGoogleの提供するAPIで無料で使えます。（連続で使用すると制限があるため、複数使用しています。）
&lt;code>&amp;quot;inputTokens&amp;quot;&lt;/code>や&lt;code>&amp;quot;temperature&amp;quot;&lt;/code>、&lt;code>&amp;quot;stream&amp;quot;&lt;/code>は公式の例をそのまま使っています。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;cody.dev.models&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;provider&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;openai&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;model&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;grok-2-latest&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;inputTokens&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">131072&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;outputTokens&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">8192&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;apiKey&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;xai-xxxxxxxxxxxxxxxxxxxxxxxx&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;options&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;temperature&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;stream&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;apiEndpoint&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;https://api.x.ai/v1&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;provider&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;groq&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;model&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;deepseek-chat&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;inputTokens&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">128000&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;outputTokens&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">8192&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;apiKey&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;sk-xxxxxxxxxxxxxxxxxxxxxxxx&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;options&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;temperature&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mf">0.6&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;apiEndpoint&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;https://api.deepseek.com/chat/completions&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;provider&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;google&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;model&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;gemini-2.0-pro-exp-02-05&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;inputTokens&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">2097152&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;outputTokens&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">8192&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;apiKey&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;AIxxxxxxxxxxxxxxxxxxxxxxxx&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;options&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;temperature&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mf">1.0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;provider&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;google&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;model&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;gemini-2.0-flash-exp&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;inputTokens&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">1048576&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;outputTokens&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">8192&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;apiKey&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;AIxxxxxxxxxxxxxxxxxxxxxxxx&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;options&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;temperature&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mf">1.0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">],&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;cody.edit.preInstruction&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Please think thoughts in English. 出力は日本語で出力してください。&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;cody.chat.preInstruction&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Please think thoughts in English. 出力は日本語で出力してください。&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>コード編集「&amp;ldquo;cody.edit.preInstruction&amp;rdquo;」とチャット「&amp;ldquo;cody.chat.preInstruction&amp;rdquo;」では、それぞれChatGPTでいうところのカスタムプロンプトを設定できます。&lt;/p>
&lt;h3 id="clineでgrokのapiを使う">ClineでGrokのAPIを使う
&lt;/h3>&lt;p>&lt;a class="link" href="https://marketplace.visualstudio.com/items?itemName=saoudrizwan.claude-dev" target="_blank" rel="noopener"
>Cline&lt;/a>はAIエージェントだと思います。ファイルの読み書きや新規作成、コマンドを実行したりします。何度もAPIとやり取りするためトークンが多くなります。&lt;/p>
&lt;p>&lt;img src="https://takoyakisoft.com/p/registering-xai-grok-api-and-using-it-with-vscode-extensions-cody-cline-roo-code/vscode_cline.webp"
width="590"
height="922"
srcset="https://takoyakisoft.com/p/registering-xai-grok-api-and-using-it-with-vscode-extensions-cody-cline-roo-code/vscode_cline_hu_5cb5e81943d4dbd4.webp 480w, https://takoyakisoft.com/p/registering-xai-grok-api-and-using-it-with-vscode-extensions-cody-cline-roo-code/vscode_cline_hu_bf8b46ac4152fc99.webp 1024w"
loading="lazy"
alt="VSCode Cline"
class="gallery-image"
data-flex-grow="63"
data-flex-basis="153px"
>&lt;/p>
&lt;p>Clineは、画像のように「OpenAI Compatible」で設定できます。
設定が終わったら「Done」で保存します。&lt;/p>
&lt;h3 id="roo-codeでgrokのapiを使う">Roo CodeでGrokのAPIを使う
&lt;/h3>&lt;p>&lt;a class="link" href="https://marketplace.visualstudio.com/items?itemName=RooVeterinaryInc.roo-cline" target="_blank" rel="noopener"
>Roo Code (prev. Roo Cline)&lt;/a>はClineからフォークした拡張機能です。
Clineより更新が速く機能が多いです。&lt;/p>
&lt;p>&lt;img src="https://takoyakisoft.com/p/registering-xai-grok-api-and-using-it-with-vscode-extensions-cody-cline-roo-code/vscode_roo_code.webp"
width="592"
height="929"
srcset="https://takoyakisoft.com/p/registering-xai-grok-api-and-using-it-with-vscode-extensions-cody-cline-roo-code/vscode_roo_code_hu_75c742f6a01439a.webp 480w, https://takoyakisoft.com/p/registering-xai-grok-api-and-using-it-with-vscode-extensions-cody-cline-roo-code/vscode_roo_code_hu_f8e5b1048fd0ee98.webp 1024w"
loading="lazy"
alt="VSCode Roo Code"
class="gallery-image"
data-flex-grow="63"
data-flex-basis="152px"
>&lt;/p>
&lt;p>Roo Codeも、画像のように「OpenAI Compatible」で設定できます。
設定が終わったら「Done」で保存します。&lt;/p></description></item></channel></rss>